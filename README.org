#+OPTIONS: toc:2

[[./Video Model Demo.mov]]

** Table of Contents :toc:
  - [[#10-315-project-sentiment-analysis-with-logistic-regression-k-nn-bag-of-words-bow-tf-idf][10-315 Project: Sentiment Analysis with Logistic Regression, k-NN, Bag of Words (BOW), TF-IDF]]
  - [[#introduction][Introduction]]
  - [[#model-card][MODEL CARD]]
  - [[#references-and-citations][References and Citations]]

** 10-315 Project: Sentiment Analysis with Logistic Regression, k-NN, Bag of Words (BOW), TF-IDF

** Introduction
- This project compares the performance of a Logistic Regression Model and a k-NN Model on a sentiment analysis task.
- The ML task is to classify an input text, specifically a movie review, as a 'positive: 1' or 'negative: 0' review.
- Our dataset is the [[https://www.kaggle.com/datasets/lakshmi25npathi/imdb-dataset-of-50k-movie-reviews][IMDB Movie Review Dataset]]. It consists of over 10,000 movie reviews labeled with sentiment (positive or negative)
- We have pre-processed the dataset to eliminate  the input text using first a Bag of Words (BOW) representation, followed by a TF-IDF weighting factor
    1.   Removed punctuation, convert to lowercase
    2.   Embed using BOW
    3.   Apply TF-IDF weighting factor

- The goal of the experimental part of this project is to gain insight into how the dimensionality of the word embeddings, specifically BOW, affect the accuracy of sentiment analyisis models. We want to explore how a reduction in dimensionality, which reduces computation cost, trades off with model accuracy.

** MODEL CARD

*** Model Details
- Model name: Sentiment Analysis Model
- Model version: 1.0
- Date: [May 2024]
- Model type: Logistic Regression, k-NN
- Input: Movie reviews (text)
- Output: Sentiment (Positive: 1; or Negative:  0)

  
*** Intended Use
- The model is designed to predict sentiment (positive or negative) based on movie reviews. It can be used to analyze the sentiment of movie reviews, or any other text.

- This can have many applications. For example, a company who just released a product might be interested in making a market study of the overall satisfaction with the product. A market study based on online comments (Instagram, Amazon reviews, etc) could be conducted, using this model to classify online comments into categories: "satisfied with product" or "not satisfied".

- It has been fine-tuned to work with short text input of about 10 to 50 words.

  
*** Training Data
- The model is trained on the IMDB Movie Review Dataset. The dataset consists of 10,000 movie reviews labeled
with sentiment (positive or negative).

*** Potential Issues
- Biased Training Data: The model's performance may be affected by biases present in the training data.
- Overfitting: The model may overfit to the training data, resulting in poor generalization to new data.
- Limited Vocabulary: The model may struggle with words that are not present in its vocabulary.
- Will have trouble effective classifying reviews that contain mixed opinions

  
*** Evaluation
- The model is evaluated based on its accuracy on a test set. The accuracy is the ratio of correctly predicted  sentiments to the total number of sentiments.

*** The Machine Learning PIPELINE
  0. Downloading Dataset
  1. Import Required Dependencies
  2. Import The DataFrame
  3. Data Pre-Processing
  4. Creating the Dataset
  5. Setting up Logistic Regression Model
  6. Training
  7. Evaluation
  8. Predict sentiment of a review



** References and Citations
- [[https://www.kaggle.com/datasets/lakshmi25npathi/imdb-dataset-of-50k-movie-reviews][IMDB Moview Review Dataset]]

- General structure for the logistic regression training function: CMU 10-315 Intro to ML Recitation. [10-315 Recitation 7 Slides](https://docs.google.com/presentation/d/16b1ckL1CtJ5GVEiOM9--XwCr6wysJPcSYg33zZhVgPo/edit#slide=id.g157a7f534dc_0_12)

- Idea to save computational power when evaluating a model by using: 'with torch.no_grad()'; [[https://pytorch.org/docs/stable/generated/torch.no_grad.html][Pytorch Docs Source]]

- Tutorial on how CountVectorizer library works. [[https://towardsdatascience.com/basics-of-countvectorizer-e26677900f9c][Source]]

- Scikit-Learn Documentation on:
  - [[https://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.text.TfidfTransformer.html][Tf-Idf library]]

  - [[https://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html][Accuracy Score library]]
  - [[https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html][KNeighborsClassifier library]]
  - [[https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html][train_test_split library]]
